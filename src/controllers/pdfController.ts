// src/controllers/pdfController.ts
import { Request, Response } from "express";
import * as pdfService from "../services/pdfService";
import * as aiService from "../services/aiService";
import path from "path";

/**
 * Controller para lidar com uploads de PDF e processamento
 */
export async function handlePdfUpload(
  req: Request,
  res: Response
): Promise<void> {
  console.log("üîç PDF Upload - Iniciando processamento");
  console.log("üìÑ Arquivo recebido:", req.file);
  try {
    if (!req.file) {
      res.status(400).json({ error: "Nenhum arquivo foi enviado" });
      return;
    }

    const filePath = req.file.path;
    console.log(
      `Arquivo recebido: ${req.file.originalname}, salvo em: ${filePath}`
    );

    // Extrair texto do PDF
    const extractedText = await pdfService.extractTextFromPDF(filePath);

    // Tenta extrair dados de or√ßamento do texto
    const budgetData = pdfService.extractBudgetDataFromText(extractedText);

    // Se encontrou dados estruturados, envia para an√°lise
    if (budgetData) {
      const systemPrompt = `
        Voc√™ √© um analista financeiro especializado em otimiza√ß√£o de or√ßamentos.
        Analise os dados do or√ßamento extra√≠do de um PDF e ofere√ßa recomenda√ß√µes espec√≠ficas em:
        
        1. An√°lise da estrutura de pre√ßos e margens
        2. Sugest√µes para aumentar o valor percebido
        3. Identifica√ß√£o de oportunidades de upsell/cross-sell
        4. Recomenda√ß√µes para aumentar a chance de aprova√ß√£o
        
        Use exemplos espec√≠ficos do or√ßamento fornecido e dados concretos.
      `;

      const prompt = `
        Por favor, analise este or√ßamento extra√≠do de um arquivo PDF e forne√ßa recomenda√ß√µes:
        
        ${JSON.stringify(budgetData, null, 2)}
        
        Estruture sua an√°lise em t√≥picos claros.
      `;

      const response = await aiService.queryModel(prompt, {
        systemPrompt,
        temperature: 0.4,
        maxTokens: 1500,
      });

      res.json({
        success: true,
        isStructuredData: true,
        extractedText:
          extractedText.substring(0, 1000) +
          (extractedText.length > 1000 ? "..." : ""),
        analysis: response,
      });
    } else {
      // Se n√£o encontrou dados estruturados, realiza an√°lise do texto completo
      const systemPrompt = `
        Voc√™ √© um especialista em or√ßamentos e propostas comerciais.
        Foi fornecido a voc√™ um texto extra√≠do de um PDF que pode conter um or√ßamento ou proposta.
        Analise o conte√∫do e tente identificar:
        
        1. Se este documento cont√©m de fato um or√ßamento ou proposta comercial
        2. Quais s√£o os principais itens, servi√ßos ou produtos listados
        3. Quais s√£o os valores e pre√ßos mencionados
        4. Quaisquer condi√ß√µes importantes como prazos, garantias ou formas de pagamento
        
        Estruture sua resposta de forma clara e objetiva, informando o que encontrou.
        Se este n√£o parecer ser um documento de or√ßamento, informe isso ao usu√°rio.
      `;

      const prompt = `
        Por favor, analise o seguinte texto extra√≠do de um arquivo PDF e verifique se cont√©m dados
        de or√ßamento ou proposta comercial. Se sim, extraia as informa√ß√µes relevantes:
        
        ${extractedText.substring(0, 4000)}${
        extractedText.length > 4000 ? "..." : ""
      }
      `;

      const response = await aiService.queryModel(prompt, {
        systemPrompt,
        temperature: 0.3,
        maxTokens: 1500,
      });

      res.json({
        success: true,
        isStructuredData: false,
        extractedText:
          extractedText.substring(0, 1000) +
          (extractedText.length > 1000 ? "..." : ""),
        analysis: response,
      });
    }

    // Remover o arquivo ap√≥s processamento
    await pdfService.removeFile(filePath);
  } catch (error) {
    console.error("Erro ao processar PDF:", error);
    const errorMessage =
      error instanceof Error ? error.message : "Erro desconhecido";
    res.status(500).json({ error: errorMessage, success: false });

    // Tenta remover o arquivo em caso de erro, se ele existir
    if (req.file && req.file.path) {
      await pdfService.removeFile(req.file.path);
    }
  }
}

/**
 * Controller para comparar dois PDFs de or√ßamentos
 */
export async function handlePdfComparison(
  req: Request,
  res: Response
): Promise<void> {
  try {
    if (
      !req.files ||
      Array.isArray(req.files) ||
      !req.files.pdf1 ||
      !req.files.pdf2
    ) {
      res
        .status(400)
        .json({ error: "Dois arquivos PDF s√£o necess√°rios para compara√ß√£o" });
      return;
    }

    const pdf1Path = req.files.pdf1[0].path;
    const pdf2Path = req.files.pdf2[0].path;

    // Extrair texto dos PDFs
    const text1 = await pdfService.extractTextFromPDF(pdf1Path);
    const text2 = await pdfService.extractTextFromPDF(pdf2Path);

    // Enviar os textos para an√°lise
    const systemPrompt = `
      Voc√™ √© um especialista em an√°lise e compara√ß√£o de or√ßamentos.
      
      Sua tarefa √© comparar dois documentos de or√ßamento diferentes e determinar qual oferece 
      a melhor op√ß√£o para o cliente, considerando:
      
      1. Pre√ßo total (qual or√ßamento √© mais barato no geral)
      2. Pre√ßo por item (identificar itens espec√≠ficos mais baratos em cada or√ßamento)
      3. Completude (verificar se algum or√ßamento est√° faltando produtos presentes no outro)
      4. Qualidade da oferta (condi√ß√µes de pagamento, prazos, garantias, etc.)
      
      Forne√ßa uma an√°lise detalhada identificando claramente:
      - Qual or√ßamento parece ter o menor pre√ßo total
      - Quais itens est√£o faltando em cada or√ßamento, se houver
      - Sua recomenda√ß√£o final sobre qual or√ßamento escolher e por qu√™
    `;

    const prompt = `
      Por favor, compare os seguintes or√ßamentos extra√≠dos de arquivos PDF e me diga qual √© a melhor
      op√ß√£o, destacando as diferen√ßas de pre√ßo e condi√ß√µes de oferta:
      
      OR√áAMENTO 1:
      ${text1.substring(0, 3000)}${text1.length > 3000 ? "..." : ""}
      
      OR√áAMENTO 2:
      ${text2.substring(0, 3000)}${text2.length > 3000 ? "..." : ""}
    `;

    const comparisonResult = await aiService.queryModel(prompt, {
      systemPrompt,
      temperature: 0.3,
      maxTokens: 2000,
    });

    res.json({
      success: true,
      comparison: comparisonResult,
      extractedText1:
        text1.substring(0, 500) + (text1.length > 500 ? "..." : ""),
      extractedText2:
        text2.substring(0, 500) + (text2.length > 500 ? "..." : ""),
    });

    // Remover os arquivos ap√≥s processamento
    await pdfService.removeFile(pdf1Path);
    await pdfService.removeFile(pdf2Path);
  } catch (error) {
    console.error("Erro ao comparar PDFs:", error);
    const errorMessage =
      error instanceof Error ? error.message : "Erro desconhecido";
    res.status(500).json({ error: errorMessage, success: false });

    // Remover arquivos em caso de erro
    if (req.files && !Array.isArray(req.files)) {
      if (req.files.pdf1 && req.files.pdf1[0])
        await pdfService.removeFile(req.files.pdf1[0].path);
      if (req.files.pdf2 && req.files.pdf2[0])
        await pdfService.removeFile(req.files.pdf2[0].path);
    }
  }
}
